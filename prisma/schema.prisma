// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  Airport Airport[] // Relation definition
}

model Airport {
  id                   Int    @id @default(autoincrement())
  icao                 String @unique
  localeName           String
  aerodomeName         String
  author               User   @relation(fields: [authorId], references: [id]) // Relation definition, foreign key definition
  authorId             Int // Foreign key that relates to user
  latitudeMeasurement  Float
  latitudeHemisphere   String
  longitudeMeasurement Float
  longitudeHemisphere  String
  elevation            Float
  address              String

  runways                                  Runway[]
  radarTrafficCommunicationFrequency       RadarTrafficCommunicationFrequency[]
  approachTrafficCommunicationFrequency    ApproachTrafficCommunicationFrequency[]
  towerTrafficCommunicationFrequency       TowerTrafficCommunicationFrequency[]
  controlTrafficCommunicationFrequency     ControlTrafficCommunicationFrequency[]
  informationTrafficCommunicationFrequency InformationTrafficCommunicationFrequency[]
  groundTrafficCommunicationFrequency      GroundTrafficCommunicationFrequency[]
  charts                                   Chart[]
  createdAt                                DateTime                                   @default(now())
  updatedAt                                DateTime                                   @updatedAt
}

model Runway {
  id                          Int     @id @default(autoincrement())
  airport                     Airport @relation(fields: [airportId], references: [id])
  airportId                   Int
  name                        String
  dimension                   Float
  surface                     String
  latitudeMeasurement         Float
  latitudeHemisphere          String
  longitudeMeasurement        Float
  longitudeHemisphere         String
  elevation                   Float
  visualSlopeIndicationSystem String?
}

model RadarTrafficCommunicationFrequency {
  id        Int     @id @default(autoincrement())
  frequency Float
  airport   Airport @relation(fields: [airportId], references: [id])
  airportId Int
}

model ApproachTrafficCommunicationFrequency {
  id        Int     @id @default(autoincrement())
  frequency Float
  airport   Airport @relation(fields: [airportId], references: [id])
  airportId Int
}

model TowerTrafficCommunicationFrequency {
  id        Int     @id @default(autoincrement())
  frequency Float
  airport   Airport @relation(fields: [airportId], references: [id])
  airportId Int
}

model ControlTrafficCommunicationFrequency {
  id        Int     @id @default(autoincrement())
  frequency Float
  airport   Airport @relation(fields: [airportId], references: [id])
  airportId Int
}

model InformationTrafficCommunicationFrequency {
  id        Int     @id @default(autoincrement())
  frequency Float
  airport   Airport @relation(fields: [airportId], references: [id])
  airportId Int
}

model GroundTrafficCommunicationFrequency {
  id        Int     @id @default(autoincrement())
  frequency Float
  airport   Airport @relation(fields: [airportId], references: [id])
  airportId Int
}

model Chart {
  id        Int     @id @default(autoincrement())
  name      String
  url       String
  airport   Airport @relation(fields: [airportId], references: [id])
  airportId Int
}
